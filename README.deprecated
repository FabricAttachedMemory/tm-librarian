---------------------------------------------------------------------------
Description
---------------------------------------------------------------------------

The Librarian is an application that runs on the Top of Rack Management
Server (TORMS) and manages all the information associated with books and
shelves.

A book is the smallest NVM allocation unit the Libraraian handles. Each node
will host a set of books managed by the Librarian.

A shelf is a management mechanism used by the Librarian to track a collection
of books that can be accessed by a commonly-known "handle".  This information
forms the metadata of the Librarian File System (LFS) seen by all nodes.
The Librarian sees only metadata, never any actual book contents.  The
LFS is a collection of shelves that can be seen by all nodes, where actual
content data is managed in user processes.

Each node presents the LFS to its Linux instance via a FuSE file system
daemon.   The LFS daemon (named lfs_fuse.py) manages the overall
metadata by communicating with the Librarian over LAN.  As metadata
operations should be a small fraction of operation, speed is not a
primary concern.   Once metadata is established, the LFS daemon handles
familiar open/close/truncate/read/write calls, and most specifically,
mmap().   This is the real power of Fabric-Attached Memory: directly 
mapping persistent storage into user process space.


---------------------------------------------------------------------------
Setup and Execution
---------------------------------------------------------------------------

- Install L4TM onto target system
- Install Librarian package "apt-get install tm-librarian"
- Create books .ini file describing desired NVM layout
- Create initial books database using book_register.py utilty and .ini file
- Start librarian.py server with newly created book database

---------------------------------------------------------------------------
Environnments
---------------------------------------------------------------------------

The Librarian will be used in several environments.

- Fabric-Attached Memory Emulation (FAME) (simulated NVM using ivshmem)
- TMAS with GenZ/NVM and Top of Rack Server implemented
- Real Hardware with GenZ/NVM and Top of Rack Server present

---------------------------------------------------------------------------
Book Registration
---------------------------------------------------------------------------

Books are physically-addressed entities in the GenZ fabric space.   Their
location is dependent on the physical topology of a Machine instance:
how many enclosures, how many nodes in each, how much NVM per node.  This
is the source of the metadata needed by the Librarian.

There is a process for registering books with the Librarian, actually
creating an SQLite database for topology, shelf collections, ownership,
etc.  In the long run this will be a more dynamic process with firmware on
each node will supplying this info.  The current workflow is a static
registration.

Initially, a static file will be used to describe the NVM hosted by each
node and a utility will be used to build an initial book database for use
by the Librarian.  The data file will be in a basic "ini" file format, or
for more fine-grained details beyond the scope of this discussion, a
JSON format is available.

The layout will consist
of a global section which lists the total number of nodes and a book size, then
a section for each node which lists the node ID, total NVM size and LZA base
address for the NVM.

Example 1:

    [global]
    node_count = 2
    book_size_bytes = 8G

    [node01]
    node_id = 1
    nvm_size = 512B

    [node22]
    node_id = 22
    nvm_size = 512B

The "B" in nvm_size refers to "books" of book_size_bytes.

In The Machine prototype release, there can be up to four enclosures with
ten nodes each.  Nodes are numbered from 1-40.  Nodes 1-10 are in 
enclosure 1, and so on.  The node's physical location determines the GenZ
address range served by that node.   book_register.py computes this
data and initializes the Librarian database.

There is also a short form that can be used if each node is symetric and
there are no gaps in LZA addresses:

Example 2:

    [global]
    node_count = 40
    book_size_bytes = 8G
    bytes_per_node = 4T

Where:

    [global]        - (STR) global section name
    node_count      - (INT) total number of nodes
    book_size_bytes - (INT) book size (M = Megabytes and G = Gigabytes)
    [node##]        - (STR) unique section name
    node_id         - (INT) unique global node ID for SoC
    nvm_size        - (INT) total size of NVM hosted by node
    bytes_per_node  - (INT) total NVM per node in bytes

Value modifiers:

    book_size_bytes and nvm_size also support suffix multipliers:

        M = MB (size * 1024 * 1024)
        G = GB (size * 1024 * 1024 * 1024)
        T = TB (size * 1024 * 1024 * 1024 * 1024)
        B = books (nvm_size only)    

Assumptions:

    - "node_cnt" matches the number of "[node#]" sections present in file
    - "nvm_size" is a multiple of "book_size"
    - nodes are in increasing order based on "lza_base"
    - "lza_base" plus "nvm_size" does not overlap next node "lza_base"
    - there can be gaps between the end of one nodes NVM and the start of another nodes NVM

---------------------------------------------------------------------------
Debian packaging of Librarian
---------------------------------------------------------------------------

- git clone https://some.where.com/tm-librarian.git
- cd librarian
- ensure you are on the master branch "git checkout master"
- edit debian/changelog file and create new entry and increment version
- create a git tag for the commit you want to package (ex: git tag -a v0.0.1 <commit>)
- push the changelog and tag to gitlab master branch "git push origin master"
- create the debian package "dpkg-buildpackage -tc"
- packaged files will be located in the parent directory
- copy the .deb, .dsc, .tar.gz and .changes files to 
  hlinux-incoming.us.rdlabs.hpecorp.net
  to the "/var/foreign/l4tm/pool/main/t/tm-librarian" directory

---------------------------------------------------------------------------
Librarian Server
---------------------------------------------------------------------------

  Librarian.py          - main librarian module
    backend_sqlite3.py  - sqlite3 interface module
      sqlassist.py      - generic sql database helper
    engine.py           - process supported librarian commands
      book_shelf_bos.py - book, shelf, bos class and methods
      cmdproto.py       - command definition for server and client
      genericobj.py     - base object class with dictionary helper
    socket_handling.py  - server/client socket handling
    librarian_chain.py  - chain conversion functions for librarian
      function_chain.py - generic function chain helper

---------------------------------------------------------------------------
Librarian FUSE interface
---------------------------------------------------------------------------

This interface will be used by applications to allocate NVM, it indirectly
interfaces with the Librarian to manage NVM related operations. It can also
be used interactively to test or query the Librarian and to pre-initialize
NVM for use by an application.

    lfs_fuse.py           - main librarian filesystem interface module
        book_shelf_bos.py - book, shelf, bos class and methods
        cmdproto.py       - command definition for server and client
	lfs_daemon.py	  - common support routines encapsulated by different
			    classes for different execution environments


---------------------------------------------------------------------------
Book Allocation Policies
---------------------------------------------------------------------------

The powerup book allocation algorithm will randomly allocate books from the
same node the request is received from. Books are deallocated from a shelf
on a LIFO basis (ie, simple truncation).  Extended file attributes associated
with a shelf will provide allocation specific details to the Librarian.
See the man pages for attr(5), xattr(7), getfattr(1), getxattr(2).

Policy is used in two fashions:

1a: create a shelf of zero length, it gets the node's default policy
1b: explicitly set the allocation policy
1c: allocate the desired amount of space

or 

2a: explicitly set the node's default allocation policy.  All shelf creations
    from this point get this policy.
2b: create a shelf of the desired size.

---------------------------------------------------------------------------
Librarian supported commands
---------------------------------------------------------------------------

The authoritative librarian command definition resides in the
cmdproto.py file.

---------------------------------------------------------------------------
Database schema
---------------------------------------------------------------------------

The authoritative librarian database schema definition resides in
the book_register.py file. Some schema data is also replicated in the
book_shelf_bos.py file.

---------------------------------------------------------------------------

