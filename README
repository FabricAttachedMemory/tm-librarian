---------------------------------------------------------------------------
Description
---------------------------------------------------------------------------

The Librarian is an application that runs on the Top of Rack Management
Server (TORMS) and manages all the information associated with books and
shelves.

A book is the smallest NVM allocation unit the Libraraian handles. Each node
will host a set of books managed by the Librarian.

A shelf is a management mechanism used by the Librarian to track groups
of books being used by a specific process.

---------------------------------------------------------------------------
Setup and Execution
---------------------------------------------------------------------------

- Install L4TM onto target system
- Install dependencies (TBD)
- Install Librarian package "apt-get install librarian" (TBD)
- Create books .ini file describing desired NVM layout
- Create initial books database using book_register.py utilty and .ini file
- Start librarian.py server with newly created book database
- Interact with the Librarian using the REPL or FUSE interfaces

---------------------------------------------------------------------------
Environnments
---------------------------------------------------------------------------

The Librarian will be used in several environments.

- QEMU Fabric Experience (simulated NVM using ivshmem)
- TMAS with GenZ/NVM and Top of Rack Server implemented
- Real Hardware with GenZ/NVM and Top of Rack Server present

---------------------------------------------------------------------------
Book Registration
---------------------------------------------------------------------------

There will need to be a process for registering books with the Librarian.
Eventually, firmware on each node will supply information to the OS about
NVM being hosted by that node. The node will then contact the librarian
and register the NVM.

Initially, a static file will be used to describe the NVM hosted by each
node and a utility will be used to build an initial book database for use
by the Librarian.

The data file will be in a basic "ini" file format. The layout will consist
of a global section which lists the total number of nodes and a book size, then
a section for each node which lists the node ID, total NVM size and LZA base
address for the NVM.

Example 1:

    [global]
    node_count = 5
    book_size_bytes = 8G
    [node01]
    node_id = 0x0A0A0A0A0A0A0A0A
    lza_base = 0x0000000000000000
    nvm_size = 64G
    [node02]
    node_id = 0x0B0B0B0B0B0B0B0B
    lza_base = 0x0000001000000000
    nvm_size = 64G
    [node03]
    node_id = 0x0C0C0C0C0C0C0C0C
    lza_base = 0x0000002000000000
    nvm_size = 64G
    [node04]
    node_id = 0x0D0D0D0D0D0D0D0D
    lza_base = 0x0000003000000000
    nvm_size = 64G
    [node05]
    node_id = 0x0E0E0E0E0E0E0E0E
    lza_base = 0x0000004000000000
    nvm_size = 64G

There is also a short form that can be used if each node is symetric and
there are no gaps in LZA addresses:

Example 2:

    [global]
    node_count = 80
    book_size_bytes = 8G
    bytes_per_node = 4T

Where:

    [global]        - (STR) global section name
    node_count      - (INT) total number of nodes
    book_size_bytes - (INT) book size (M = Megabytes and G = Gigabytes)
    [node##]        - (STR) unique section name
    node_id         - (INT) unique global node ID for SoC
    lza_base        - (INT) logical GenZ base address for NVM hosted by node
    nvm_size        - (INT) total size of NVM hosted by node
    bytes_per_node  - (INT) total NVM per node in bytes

Value modifiers:

    book_size_bytes and nvm_size also support suffix multipliers:

        M = MB (size * 1024 * 1024)
        G = GB (size * 1024 * 1024 * 1024)
        T = TB (size * 1024 * 1024 * 1024 * 1024)
        B = books (nvm_size only)    

Assumptions:

    - "node_cnt" matches the number of "[node#]" sections present in file
    - "nvm_size" is a multiple of "book_size"
    - nodes are in increasing order based on "lza_base"
    - "lza_base" plus "nvm_size" does not overlap next node "lza_base"
    - there can be gaps between the end of one nodes NVM and the start of another nodes NVM

---------------------------------------------------------------------------
Debian packaging of Librarian
---------------------------------------------------------------------------

The librarian and all supporting files/documentation should be delivered
in a Debian/hLinux package.

TBD

---------------------------------------------------------------------------
Librarian Server
---------------------------------------------------------------------------

  Librarian.py          - main librarian module
    backend_sqlite3.py  - sqlite3 interface module
      sqlassist.py      - generic sql database helper
    engine.py           - process supported librarian commands
      book_shelf_bos.py - book, shelf, bos class and methods
      cmdproto.py       - command definition for server and client
      genericobj.py     - base object class with dictionary helper
    socket_handling.py  - server/client socket handling
    librarian_chain.py  - chain conversion functions for librarian
      function_chain.py - generic function chain helper

---------------------------------------------------------------------------
Librarian REPL interface
---------------------------------------------------------------------------

This interface can be used to interactively send commands to the Librarian
for testing and debug.

    repl_client.py            - main librarian interactive interface module
        socket_handling.py    - server/client socket handling
        librarian_chain.py    - chain conversion functions for librarian
            function_chain.py - generic function chain helper
        cmdproto              - command definition for server and client

---------------------------------------------------------------------------
Librarian FUSE interface
---------------------------------------------------------------------------

This interface will be used by applications to allocate NVM, it indirectly
interfaces with the Librarian to manage NVM related operations. It can also
be used interactively to test or query the Librarian and to pre-initialize
NVM for use by an application.

    lfs_fuse.py           - main librarian filesystem interface module
        book_shelf_bos.py - book, shelf, bos class and methods
        cmdproto          - command definition for server and client

---------------------------------------------------------------------------
Books Allocation Alogrithm
---------------------------------------------------------------------------

The default book allocation algorithm will randomly allocate books from the
same node the request is received from. Books are deallocated from a shelf
on a LIFO basis.

A "precise create" option will also be implemented to support single
NVM allocation using a given interleave group.

Extended file attributes associated with a shelf will provide allocation
specific details to the Librarian.

---------------------------------------------------------------------------
Librarian supported commands
---------------------------------------------------------------------------

The authoritative librarian command definition resides in the
cmdproto.py file.

---------------------------------------------------------------------------
Database schema
---------------------------------------------------------------------------

The authoritative librarian database schema definition resides in
the book_register.py file. Some schema data is also replicated in the
book_shelf_bos.py file.

---------------------------------------------------------------------------
